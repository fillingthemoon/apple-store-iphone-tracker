import type { NextPage } from 'next'
import Head from 'next/head'

import { Stack, Table, Title, Alert } from '@mantine/core'

import axios from 'axios'
import React, { useEffect, useState } from 'react'

import theme from '../theme'
import iPhoneModels from '../iPhoneModels'

const { available, unavailable } = theme.colors

const Home: NextPage = (props: any) => {
  const { iPhoneProductAndStockInfo } = props

  const [appleStores, setAppleStores] = useState([])

  useEffect(() => {
    if (iPhoneProductAndStockInfo.length > 0) {
      const stores = iPhoneProductAndStockInfo[0]?.content.pickupMessage.stores
      setAppleStores(stores.map((store: any) => store.address.address))
    }
  }, [])

  console.log(iPhoneProductAndStockInfo)

  if (iPhoneProductAndStockInfo.length <= 0) {
    return (
      <Alert m={10} title="Error" color="red">
        {`O no, you've encountered an error!`}
      </Alert>
    )
  }

  const Cols = () => (
    <tr>
      {/* <th>ID</th> */}
      <th>Model</th>
      <th>Color</th>
      <th>Capacity</th>
      <th>Price</th>
      {appleStores.map((appleStore, i) => (
        <th key={i}>{appleStore}</th>
      ))}
    </tr>
  )

  const rows = iPhoneProductAndStockInfo.map((iPhoneRow: any, i: number) => {
    const { id, productInfo } = iPhoneRow
    const model =
      iPhoneRow.content.pickupMessage.stores[0].partsAvailability[`${id}/A`]
        .messageTypes.regular.storePickupProductTitle
    const { dimensionColor: color, dimensionCapacity: capacity } =
      productInfo.productDimensions
    const price = productInfo.priceData.fullPrice.priceString
    const stores = iPhoneRow.content.pickupMessage.stores

    return (
      <tr key={i}>
        {/* <td>{id}</td> */}
        <td>{model}</td>
        <td>{color}</td>
        <td>{capacity}</td>
        <td>{price}</td>
        {stores.map((store: any, j: number) => {
          const quote =
            store.partsAvailability[`${id}/A`].messageTypes.regular
              .storePickupQuote
          return (
            <td
              key={j}
              style={{
                backgroundColor: quote.includes('unavailable')
                  ? unavailable
                  : available,
              }}
            >
              {quote}
            </td>
          )
        })}
      </tr>
    )
  })

  return (
    <div>
      <Head>
        <title>Apple Store iPhone Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack spacing="sm" m={10}>
        <Title>Apple Store iPhone Tracker</Title>
        <Table striped>
          <thead>
            <Cols />
          </thead>
          <tbody>{rows}</tbody>
        </Table>
      </Stack>
    </div>
  )
}

export async function getServerSideProps() {
  let iPhoneProductAndStockInfo = []

  try {
    // iPhone stock info
    const iPhoneStockInfoArr: any[] = []
    iPhoneModels.forEach((iPhoneModel) => {
      const iPhoneStockInfo = axios.get(
        `https://www.apple.com/sg/shop/fulfillment-messages?pl=true&mts.0=regular&mts.1=compact&parts.0=${iPhoneModel.id}/A&searchNearby=true&store=R669`
      )
      iPhoneStockInfoArr.push(iPhoneStockInfo)
    })
    const iPhoneStockInfoRes = await Promise.all(iPhoneStockInfoArr)

    const iPhoneStockInfoResArr: any[] = iPhoneStockInfoRes.map(
      (iPhoneStockInfo, i) => {
        const iPhoneStockInfoBody = iPhoneStockInfo.data.body
        return {
          ...iPhoneStockInfoBody,
          ...iPhoneModels[i],
        }
      }
    )

    // iPhone product info
    const iPhoneProductInfoArr: any[] = []
    iPhoneModels.forEach((iPhoneModel) => {
      const iPhoneProductInfo = axios.get(
        `https://www.apple.com/sg/shop/updateSummary?node=home%2Fshop_iphone%2Ffamily%2Fiphone_12&step=select&product=${iPhoneModel.id}%2FA&bfil=undefined`
      )
      iPhoneProductInfoArr.push(iPhoneProductInfo)
    })

    const iPhoneProductInfoRes = await Promise.all(iPhoneProductInfoArr)

    const iPhoneProductInfoResArr: any[] = iPhoneProductInfoRes.map(
      (iPhoneProductInfo, i) => {
        const iPhoneProductInfoBody = iPhoneProductInfo.data.body
        return {
          ...iPhoneProductInfoBody,
          ...iPhoneModels[i],
        }
      }
    )

    iPhoneProductAndStockInfo = iPhoneProductInfoResArr.map(
      (iPhoneProductInfo, i) => {
        return {
          ...iPhoneStockInfoResArr[i],
          productInfo: iPhoneProductInfo.response.summarySection.summary,
        }
      }
    )
  } catch (err) {
    console.log('Error')
  }

  return {
    props: {
      iPhoneProductAndStockInfo,
    },
  }
}

export default Home
