import type { NextPage } from 'next'
import Head from 'next/head'

import { Stack, Table, Title, Alert, Select, Text } from '@mantine/core'

import allIPhones from '../allIPhones'
import { getIPhoneProductAndStockInfo } from '../getIPhoneProductAndStockInfo'

import React, { useEffect, useState } from 'react'

import theme from '../theme'
const { available, unavailable } = theme.colors

const iPhoneModels = allIPhones.reduce((prev: any, next: any) => {
  if (
    prev[prev.length - 1]?.model !== next.model ||
    prev[prev.length - 1]?.color !== next.color
  ) {
    prev.push({
      model: next.model,
      color: next.color,
    })
  }

  return prev
}, [])

const Cols = (props: any) => {
  const { appleStores }: { appleStores: any[] } = props

  return (
    <tr>
      {/* <th>{`ID`}</th> */}
      {['Model', 'Color', 'Capacity', 'Price'].map((colName, i) => (
        <th key={i}>{colName}</th>
      ))}
      {appleStores.map((appleStore, i) => (
        <th key={i}>{appleStore}</th>
      ))}
    </tr>
  )
}

const Home: NextPage = (props: any) => {
  const { iPhoneProductAndStockInfo } = props

  const [appleStores, setAppleStores] = useState([])

  useEffect(() => {
    if (iPhoneProductAndStockInfo.length > 0) {
      const stores = iPhoneProductAndStockInfo[0]?.stores
      setAppleStores(stores.map((store: any) => store.address))
    }
  }, [])

  if (iPhoneProductAndStockInfo.length <= 0) {
    return (
      <Alert m={10} title="Error" color="red">
        {`O no, you've encountered an error, please try again later!`}
      </Alert>
    )
  }

  const rows = iPhoneProductAndStockInfo.map((iPhoneRow: any, i: number) => {
    const { productId, model, productInfo, stores } = iPhoneRow
    const {
      dimensionColor: color,
      dimensionCapacity: capacity,
      priceString: price,
    } = productInfo

    return (
      <tr key={i}>
        {/* <td>{productId}</td> */}
        {[model, color, capacity, price].map((colName, i) => (
          <td key={i}>{colName}</td>
        ))}
        {stores.map((store: any, j: number) => {
          const quote = store.storePickupQuote
          return (
            <td
              key={j}
              style={{
                backgroundColor: quote.includes('unavailable')
                  ? unavailable
                  : available,
              }}
            >
              {quote}
            </td>
          )
        })}
      </tr>
    )
  })

  const handleSelectIPhone = async () => {
    await getIPhoneProductAndStockInfo(iPhoneModels[1])
  }

  return (
    <div>
      <Head>
        <title>{`Apple Store iPhone Tracker`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack spacing="md" m={10}>
        <Title>{`Apple Store iPhone Tracker`}</Title>
        <Select
          label=""
          defaultValue={`${iPhoneModels[0].model} (${iPhoneModels[0].color})`}
          searchable
          nothingFound="No options"
          data={iPhoneModels.map(
            (iPhone: any) => `${iPhone.model} (${iPhone.color})`
          )}
          onChange={handleSelectIPhone}
        />
        <Table striped>
          <thead>
            <Cols appleStores={appleStores} />
          </thead>
          <tbody>{rows}</tbody>
        </Table>
      </Stack>
    </div>
  )
}

export async function getServerSideProps() {
  const iPhoneProductAndStockInfo = await getIPhoneProductAndStockInfo(
    iPhoneModels[1]
  )

  return {
    props: {
      iPhoneProductAndStockInfo,
    },
  }
}

export default Home
